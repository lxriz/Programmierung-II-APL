import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import Model.Translation;
import Model.Simulation.Kiosk;
import Model.Simulation.Market;
import Model.Simulation.Simulation;
import Model.Simulation.Products.*;

/**
 * JUnit tests for the Kiosk simulation.
 */
public class JUnitTest 
{
    /**
     * Tests the English translation for the program name.
     */
    @Test
    public void testEnglishTranslation()
    {
        Translation trans = new Translation();
        String test = trans.getText("PROG_NAME");
        assertEquals("Kiosk Game", test);
    }

    /**
     * Tests the German translation for the program name.
     */
    @Test
    public void testGermanTranslation()
    {
        Translation trans = new Translation("DE");
        String test = trans.getText("PROG_NAME");
        assertEquals("Kiosk Spiel", test);
    }

    /**
     * Tests the rounding of prices in the market.
     */
    @Test
    public void testMarketRoundPrice()
    {
        Market market = new Market(0);
        Double test = market.roundPrice(5.599);
        assertEquals(5.60, test); 
    }

    /**
     * Tests the calculation of prices based on weather in the market.
     */
    @Test
    public void testMarketPriceWeather()
    {
        Market market = new Market(0);
        Double test = market.calculatePriceWeather(5.00, 0.5);
        assertEquals(7.50, test); 
    }

    /**
     * Tests if the kiosk can pay a specified amount.
     */
    @Test
    public void testKioskCanPay()
    {
        Kiosk kiosk = new Kiosk("Test");
        Boolean test = kiosk.canPay(1000);
        assertEquals(test, false); 
    }

    /**
     * Tests adding cash to the kiosk.
     */
    @Test
    public void testKioskAddCash()
    {
        Kiosk kiosk = new Kiosk("Test");
        kiosk.addCash(100);
        double test = kiosk.getCash();
        assertEquals(kiosk.startCash + 100, test); 
    }
    
    /**
     * This test case verifies the customer generation logic in the Simulation class.
     * Specifically, it checks that the number of customers generated falls within an expected range.
     */
    @Test
    public void testCustomerGeneration()
    {
        Kiosk kiosk = new Kiosk("Test"); // Create a new Kiosk instance with the name "Test".
        Simulation sim = new Simulation(kiosk); // Initialize a Simulation instance with the created Kiosk.
        int customerCount = sim.getCountCustomers(); // Retrieve the count of customers generated by the simulation.

        boolean test1 = false; // Initialize the first test result flag.
        boolean test2 = false; // Initialize the second test result flag.

        if(customerCount >= 20)
        {
            test1 = true; // Set test1 to true if the number of customers is at least 20.
        }

        if(customerCount <= 60)
        {
            test2 = true; // Set test2 to true if the number of customers is at most 60.
        }

        assertEquals(test1, true); // Assert that test1 is true, indicating customerCount is >= 20.
        assertEquals(test2, true); // Assert that test2 is true, indicating customerCount is <= 60.
    }

    
    /*
    @Test
    // Tests the toString() method of data classes
    public void testToString()
    {
    	Newspaper newspaper = new Newspaper();
    	System.out.println(newspaper.toString());
    	newspaper = new Newspaper(0);
    	System.out.println(newspaper.toString());
    	assertEquals(true, true);
    }
    */
}

